const MOVE = [[-1, 0], [1, 0], [0, -1], [0, 1]];

function solution(grid, k) {
    let [n, m] = [grid.length, grid[0].length];

    function isBoundary(y, x) {
        if(y >= 0 && y < n && x >= 0 && x < m) return true;
        return false;
    }

    let stack = new Array();
    stack.push([0, 0, "", Array(n).fill(0).map((_,i)=>Array(m).fill(false))]);
    
    let roads = [];

    while(stack.length) {
        let [y, x, road, visited] = stack.pop();
        visited[y][x] = true;
        visited = JSON.parse(JSON.stringify(visited));
        if(y === n-1 && x === m-1) {
            roads.push(road);
        }

        for(let move of MOVE) {
            let [ty, tx] = move;
            
            if(!isBoundary(y + ty, x + tx)) continue;
            if(visited[y + ty][x + tx]) continue;
            if(grid[y + ty][x + tx] === "#") continue;

            stack.push([y + ty, x + tx, road+grid[y][x], visited]);
        }
    }
    let answer = 25 * 25;

    for(let road of roads) {
        if(road.length <= k) return 0;

        let curr = 0;
        let count = 0;
        while(curr !== road.length-1) {
            for(let tk = k; tk > 0; tk--) {
                if(road.length <= curr+tk) {
                    curr = road.length-1;
                    break;
                }
                if(road[curr+tk] === ".") {
                    count++;
                    curr = curr+tk;
                    break;
                }
            }
        }
        answer = Math.min(answer, count);
    }
    return answer;
}